/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cryptography;

import java.awt.HeadlessException;
import javax.swing.JOptionPane;

/**
 *
 * @author omidt
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        enc_msg = new javax.swing.JTextField();
        enc_button = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        enc_algo = new javax.swing.JComboBox<>();
        enc_key = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Encrypt your message");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome to Encryption/Decryption Application");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel2.setText("Enter a text to encrypt:");

        jLabel3.setText("Enter a key for encryption:");

        enc_msg.setToolTipText("Encryption Message...");
        enc_msg.setName(""); // NOI18N

        enc_button.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        enc_button.setText("Encrypt the message");
        enc_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enc_buttonActionPerformed(evt);
            }
        });

        jLabel4.setText("Select Encryption Algorithm:");

        enc_algo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1. Caesar Cipher", "2. Playfair Cipher", "3. Vigen-ere Cipher", "4. Block Cipher (DES)", "5. One Time Pad" }));

        enc_key.setToolTipText("Enter the encryption key");

        jLabel5.setFont(new java.awt.Font("Microsoft YaHei", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Created by @Omid Taghipour");

        jMenu1.setText("Options");

        jMenuItem1.setText("View All encryptions and the decrypted message");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enc_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel2))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enc_msg)
                            .addComponent(enc_algo, 0, 263, Short.MAX_VALUE)
                            .addComponent(enc_key)))
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(enc_msg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(enc_key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(enc_algo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(enc_button, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enc_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enc_buttonActionPerformed
        String message = enc_msg.getText();
        String key = enc_key.getText();
        int algo = enc_algo.getSelectedIndex();
        switch (algo) {
            case 0 -> {
                // Caesar Cipher
                try {
                    if (key.equals(String.valueOf(Integer.parseInt(key)))) {
                        try {
                            String cipher = String.valueOf(Cryptography.Encrypt_Caesar(message, Integer.parseInt(key)));
                            Cryptography.add_Encryption(message, key, cipher, algo);
                            convert_menu(cipher);
                        } catch (Exception e) {
                            JOptionPane.showConfirmDialog(rootPane, "Invalid key is entered");
                        }

                    }
                } catch (HeadlessException | NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Encryption Key for the Caesar Cipher must be a nummerical value!");
                }
            }
            case 1 -> {
                try {

                    // Playfair Cipher
                    String regex = "([A-Z]|[a-z])+";
                    if (key.matches(regex)) {
                        String cipher = Cryptography.Encrypt_Playfair(message, key);
                        Cryptography.add_Encryption(message, key, cipher, algo);
                        convert_menu(cipher);
                    } else {
                        JOptionPane.showMessageDialog(null, "For Playfair Cipher Encryption key must be alphabetical characters");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Invalid key is entered");
                }
            }
            case 2 -> {
                try {
                    // Vigenere Cipher
                    message = Cryptography.LowerToUpper_vigenere(message);
                    key = Cryptography.LowerToUpper_vigenere(key);
                    key = Cryptography.generateKey_vigenere(message, key);
                    String cipher = Cryptography.cipherText_vigenere(message, key);
                    Cryptography.add_Encryption(message, key, cipher, algo);
                    convert_menu(cipher);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Invalid key is entered" + e.getMessage());
                }

            }
            case 3 -> {
                try {
                    // Block Cipher DES
                    String regex = "([0-9])+";
                    if (key.matches(regex)) {
                        String cipher = Cryptography.Encrypt_DES(message, key);
                        if (cipher.equals("")) {
                            break;
                        }
                        Cryptography.add_Encryption(message, key, cipher, algo);
                        convert_menu(cipher);
                    } else {
                        JOptionPane.showMessageDialog(jMenu1, "Key must be nummerical.\nTry again!");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Invalid key is entered");
                }

            }
            case 4 -> {
                try {
                    if (message.length() != key.length()) {
                        JOptionPane.showMessageDialog(null, "Length of message should be equal to the key!");
                    } else {
                        // One Time Pad
                        String cipher = Cryptography.OTP_Encryption(message.toUpperCase(), key.toUpperCase());
                        if (cipher.equals("")) {
                            break;
                        }
                        Cryptography.add_Encryption(message, key, cipher, algo);
                        convert_menu(cipher);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Invalid key is entered");
                }
            }
            default ->
                JOptionPane.showMessageDialog(null, "Wring algorithm is selected!");
        }
    }//GEN-LAST:event_enc_buttonActionPerformed

    private void convert_menu(String cipher) {
        enc_msg.setText(cipher.toUpperCase());
        enc_msg.setEnabled(false);
        enc_button.setText("Encrypt again with another algorithm");
    }
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        ListEncryption enc_table = new ListEncryption();
        enc_table.show();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> enc_algo;
    private javax.swing.JButton enc_button;
    private javax.swing.JTextField enc_key;
    private javax.swing.JTextField enc_msg;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    // End of variables declaration//GEN-END:variables
}
